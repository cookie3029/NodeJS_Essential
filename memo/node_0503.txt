**Node
=> JavaScript 문법으로 애플리케이션을 만들 수 있도록 해주는 프레임워크

1. 내장 모듈 : 노드가 제공하는 모듈
1) util 모듈
=> util.deprecated: 다른 함수를 호출할 때 경고를 발생시키기 위한 함수
첫번째 인자로 함수를 대입하고 두번째 인자로 함수를 호출했을 때 보여질 메시지를 설정
이 함수도 콜백(비동기 처리를 위해서 만든 함수)의 형태로 동작

=> util.promisify : 콜백 함수 대신에 promise 패턴(비동기 동작을 구현하기 위한 패턴)을 적용

// 함수에 경고 메시지를 주는 경우는 일반적으로 2가지
// 한 가지 경우는 보안상의 허점이 발견된 경우와
// 가독성이나 성능이 좋은 다른 함수를 만들었을 때
const dontUseMe = util.deprecate((x, y) => {
    console.log(x + y)
}, '이 함수는 deprecated 상태입니다.')

dontUseMe(10, 20)

// crypto 모듈의 randomBytes라는 함수를 이용
const crypto = require('crypto')
const promisedRb = util.promisify(crypto.randomBytes)

// crypto.randomBytes 함수에 64를 넘겨서 작업을 수행하고 작업을 성공하면
// 함수가 리턴한 값을 buf에 대입한 후 코드 블럭을 수행하고
// crypto.randomBytes 작업 도중 예외가 발생하면 catch 블럭에 에러 내용을
// err에 대입해서 작업을 수행
promisedRb(64).then((buf) => {
    // 정상적으로 함수가 호출 되었을 때 수행할 내용
    console.log(buf.toString('base64'))
}).catch((err)=> {
    // 예외가 발생했을 때 수행할 내용
    console.error(err)
})

2) worker_threads
=> web worker - HTML5 (HTML4의 버전이 높아진 것으로 semantic 기능의 강화와 플러그인 없이 
	웹 애플리케이션을 제작하기 위해 등장)에서 등장한 개념으로 JavaScript에서도 스레드를 만들어서 사용하는 것이 가능
=> isMainThread - 메인 스레드에서 동작하는 것인지 아니면 생성한 worker thread에서 실행되는지 확인
new Worker(파일명)을 이용해서 파일의 내용을 worker thread를 생성해서 수행하고 postMessage로 자신을
호출한 스레드에게 message 이벤트를 발생시키며 부모 스레드에서 postMessage를 호출하면 워커 스레드에는 
message 이벤트가 발생합니다.

3) child_process
=> 다른 애플리케이션을 실행할 수 있는 모듈
=> 일반적으로 Machine Learning은 Python으로 많이 수행합니다.
Python이 Machine Learning을 하도록 하고 그 결과를 node에서 사용하고자 하는 경우에 이 모듈을 이용할 수 있습니다.

=> test.py 파일을 생성
print('Hello Python')

=> node 파일에 작성
const spawn = require('child_process').spawn

var process = spawn('python', ['test'.py'])

process.stdout.on('data', function(data) {
	// test.py 파일을 실행하고 난 후 작업할 내용
})

process.stderr.on('data', function(data) {
	// test.py 파일을 실행하다가 예외가 발생한 경우 수행할 내용
})

2. 파일 시스템
=> fs 모듈 이용
1) 비동기식으로 파일 읽기
fs.readFile('파일 경로', [option], callback 함수)
=> callback 함수의 첫번째 매개변수는 에러가 발생했을 때 에러 내용을 저장한 에러 객체이고
	두번째 매개변수는 읽어낸 파일의 내용

2) 동기식으로 파일 읽기
fs.readFileSync('파일 경로', [option])
=> 파일의 내용을 읽어서 읽은 내용을 리턴

// 아래 코드를 실행하기 전에 test.txt 파일을 만들어야 합니다.

// test.txt 파일 읽기
const fs = require('fs')

// 비동기적으로 파일 읽기
fs.readFile('./test.txt', 'utf8', (err, data) => {
    console.log(data)
    console.log('이 내용이 나중에 수행됨')
})

// 동기적으로 파일 읽기 - 파일의 내용이 많을 때 이 방법은 위험
let data = fs.readFileSync('./test.txt', 'utf8')
console.log(data);
console.log('파일의 내용을 읽고 난 후 실행');

// 일반적으로 파일 입출력과 네트워크 입출력은 대부분 비동기 방식으로 구현

3) Buffer
=> 데이터를 일정한 크기로 모아두는 것으로 버퍼의 배용이 전부 채워지면 작업을 수행
=> 버퍼의 내용을 비우는 작업을 flush라고 합니다.

4) Stream
=> 데이터를 일정한 크기로 나누어서 전송하기 위한 통로
=> 스트리밍은 데이터를 일정한 크기(버퍼, 청크, 패킷 등으로 부름)로 나누어서 연속적으로 전송하는 것

5) pipe
=> 파일 입출력 작업을 연속적으로 묶은 것

6) 파일 입출력의 개념은 중요하지만 웹 프로그래밍에서는 특별한 경우가 아니면(로그 기록) 잘 사용하지 않습니다.
=> 대부분 프레임워크를 이용해서 작업을 수행합니다.

3. Event Handling
1) 이벤트 등록
객체.addListener('이벤트 이름', 콜백 함수) : 기존 콜백 함수에 내용이 추가
객체.on('이벤트 이름', 콜백 함수) : 기존 콜백 함수를 변경
객체.once('이벤트 이름', 콜백 함수) : 콜백 함수를 한 번만 호출

2) 이벤트 제거
객체.removeListener('이벤트 이름') : 이벤트에 연결된 모든 콜백함수 제거
객체.removeListener('이벤트 이름', 콜백 함수 이름) : 이벤트에 연결된 콜백함수의 이름에 해당하는 함수만 제거
객체.off('이벤트 이름') : 이벤트에 연결된 모든 콜백함수 제거

3) 이벤트 강제 발생(trigger)
객체.emit('이벤트 이름')

4) setMaxListner(개수)
=> 하나의 이벤트에 함수를 10개 이상 연결하면 에러가 발생 이 함수를 호출해서 개수를 늘릴 수 있습니다.

4. 예외
=> 예외처리는 자바스크립트 문법으로 작성
=> node 14버전 이전까지는 노드는 싱글 스레드 기반이라서 예외가 발생하면 노드 애플리케이션이 중지되버림
=> node 14버전 부터는 멀티 스레드가 가능하기 때문에 예외가 발생하면 예외가 발생한 스레드만 중지

5. 현재까지 알아야 할 내용
=> node가 무엇인지
=> node 프로젝트 생성 후 실행
=> 외부 모듈은 어덯게 사용하는지

**npm
1. Node Package Manager
=> 3rd Party 개발자들이 만든 소스 코드를 모아놓은 저장소
=> Open Source 생태계
=> package : 하나의 기능을 수행하기 위해 모아놓은 모듈의 집합

2. package.json
=> 노드의 설정 파일로 패키지에 대한 의존성을 설정할 수 있습니다.
maven의 pom.xml이나 gradle의 build.gradle의 역할을 수행

=> 구성
package name : 현재 프로젝트를 배포할 때 사용하는 이름
version : 버전
entry point : 실행파일 진입점
test command : 코드를 테스트할 때 입력할 명령어
git repository : 코드를 저장해 둔 Git 저장소의 URL
keyword : 검색어로 배포했을 때 다른 개발자들이 찾기 쉽도록 설정하는 단어
license : 라이센스

3. 패키지 설치
npm install 패키지 이름
=> install 대신에 i라고만 입력해도 됨

1) 전역으로 설치
=> -g나 -global을 추가
=> 현재 프로젝트를 벗어나서 터미널에서도 사용가능한 모듈로 만드는 것
=> 관리자 권한이 있어야 해서 맥이나 리눅스에서는 npm 앞에 sudo를 붙여야 실행 가능

2) 개발용으로 설치
=> --save-dev를 추가해서 설치
=> 배포를 할 때는 이 패키지가 제거됩니다.

4. node_module 디렉토리
=> npm으로 다운로드 받은 패키지들이 저장되는 디렉토리
=> 이 디렉토리의 내용은 삭제해도 됩니다.
다시 다운로드 받고자 할 때는 npm init(npm install) 명령만 다시 수행해주면 됩니다.


5. 패키지 설치 및 확인
=> express(웹서버를 쉽게 만들어주는 패키지) 패키지를 설치
npm install express OR npm install --save express

=> nodemon(코드를 변경하면 자동으로 웹 서버를 실행해주는 패키지)이라는 패키지를 개발용으로 설치
npm install --save-dev nodemon

=> rimaraf(윈도우 터미널에서 rm 명령어를 사용할 수 있도록 해주는 패키지)과 
	pm2(노드 프로세스 상태를 관리) 패키지를 전역으로 설치
npm install pm2 -g OR npm install --save pm2 (mac 에서는 앞에 sudo를 붙여서 실행)

1) index_2.js 파일을 생성하고 실행
setInterval(()=>{
    console.log('타이머')
}, 1000)

2) 터미널을 실행시켜서 index_2.js 파일이 있는 곳으로 이동
pm2 start index_2.js

pm2 monit

6. 패키지 배포
1) https://www.npmjs.com에서 회원 가입
2) 터미널에서 npm adduser로 로그인
3) entry point 파일에 작성
module.exports = () => {
	return '패키지이름 package'
}
4) 터미널에서 패키지가 있는 곳으로 이동해서 npm publish 명령으로 배포

5) 패키지 삭제
npm unpublish 패키지 이름 -> 배포하고 3일 이내에 삭제해야함

** node web server - http 내장 모듈 이용
1. 웹 서버 생성 및 실행
=> http 모듈을 가져오기

=> 서버 만들기
http.createServer(함수(request객체, response객체){서버가 시작되었을 때 수행할 내용})

=> 서버 실행
서버객체.listen(포트번호, 아이피주소)

=> 서버 종료
서버객체.close()

2. 서버 객체 : http.createServer를 호출하면 만들어지는 객체
=> 이벤트
request : 클라이언트의 요청이 있을 때 - 클라이언트의 요청을 받아서 작업을 수행해서 결과를 리턴해야 합니다.
connection : 클ㄹ라이언트가 접속을 할 때
close : 서버가 종료될 때 - 외부 자원을 사용한 것이 있다면 정리 작업을 해야 합니다.
checkContinue : 지속적인 연결을 할 때
upgrade : 클라이언트가 HTTP 업그레이드 요청을 할 때
clientError : 클라이언트에서 오류가 발생했을 때

3. request 객체
=> 웹 클라이언트의 요청한 정보를 저장하고 있는 객체
=> url(요청 경로)과 method(전송 방식) 속성

4. response 객체
=> 요청에 대한 응답을 하기 위한 객체
=> writeHead(상태코드, 객체) : 헤더 작성
=> write(내용) : 본문 작성
=> end(내용) : 현재까지의 내용을 클라이언트에게 전송

5. 웹 서버 만들기 - 파일에 작성하고 실행
const http = require('http')

http.createServer((req, res) => {
    // 요청이 왔을 때 수행할 내용
    res.writeHead(200, {'Content-Type' : 'text/html; charset=utf-8'})
    res.write('<h2>처음 만든 노드 웹 서버</h2>')
    res.end('<p>Hello!</p>')
}).listen(9000, () => {
    console.log('서버 대기 중')
});

6. 정적 파일 출력
=> 출력 내용을 서버 코드에 직접 작성하지 않고 별도의 파일을 만든 후 파일의 내용을 출력
1) 프로젝트에 HTML 파일을 만들고 작성
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
    </head>
    <body>
        노트로 만든 웹 서버
    </body>
</html>

2) 자바스크립트 파일을 만들어서 작성하고 node 파일명으로 실행
http.createServer(async(req, res) => {
    try {
        const data = await
        // 파일의 내용을 읽어서 data에 저장
        fs.readFile('./main.html')
        res.writeHead(200, {'Content-Type' : 'text/html; charset=utf-8'})
        res.end(data)
    } catch (err) {
        
    }
}).listen(9000, () => {
    console.log('서버 대기 중')
})

3) 브라우저에서 localhost:9000을 입력하고 HTML 파일에 작성한 내용이 출력되는지 확인

7. Session과 Cookie
1) HTTP나 HTTPS는 상태가 없음
=> HTTP나 HTTPS는 연결해서 응답을 받으면 연결을 유지하지 않습니다.
=> 웹 서버와 클라이언트 사이의 정보 유지가 안됨

2) Cookie
=> 서버가 클라이언트의 브라우저에 데이터를 저장하는 방법
클라이언트가 서버에게 요청을 보낼 때마다 같이 전송됩니다.
=> 문제점 : 클라이언트의 브라우저에 저장되어 있어서 보안이 취약하고 서버에게 전송할 필요가 없는 경우에도
	항상 서버에게 전송해야 합니다.
=> 대안 : 쿠키를 저장할 때 암호화해서 저장하거나 웹 스토리지(웹 스토리지, 웹 SQL 등)를 이용해서 
	클라이언트의 브라우저에 저장하는 방법 등이 사용됨
=> 최근에는 사용자의 동선 추적에 많이 이용

=> http 모듈에서 쿠키에 저장
- res.writeHead({'Set-Cookie' : '쿠키이름=값'}을 이용
	-> 여러개의 쿠키를 저장하고자 할 때는 ;으로 구분해서 저장

=> 쿠키 읽기
req.headers.cookie

=> 브라우저에서 쿠키 확인
검사 창에서 확인

=> 쿠키 옵션
쿠키이름=값 - 쿠키 이름과 값을 생성
Expires=날짜 - 쿠키의 수명을 설정하는데 날짜가 지나가면 쿠키는 제거되며 기본 값은 클라이언트가 종료될 때
Max-age=초 - 날짜 대신에 초를 입력해서 쿠키의 수명을 설정
Domain=도메인이름 - 쿠키를 사용할 수 있는 도메인을 특정할 수 있는데 기본값은 현재 도메인
Path=URL - 쿠키가 전송될 URL을 설정할 수 있는데 기본값은 /
Secure를 설정하면 HTTPS인 경우만 쿠키를 전송
HttpOnly를 설정하면 자바스크립트에서 쿠키 접근을 못함

3) Session
=> 웹 서버에 클라이언트 정보를 저장하기 위한 방법
=> 하나의 브라우저 당 하나가 생성됨

4) 브라우저에 데이터 저장
=> Cookie : 매번 서버에게 전송하고 문자열만 저장 가능

=> WebStorage(Local Storage, Session Storage)
=> WebSQL
=> Indexed DB

5) WebStorage
=> LocalStorage : 브라우저에 저장 - 접속이 해제되도 정보를 유지
=> SessionStorage : 현재 접속중인 브라우저에서만 유효
=> 데이터 저장은 .키이름 = 값, ['키이름'] = 값, .setItem('키이름', 값)
=> 데이터 읽기는 .키이름, ['키이름'], .getItem('키이름')
=> 데이터 삭제는 delete .키이름

6) localStorage를 이용한 아이디 저장과 불러오기
=> main.html 파일을 수정하고 브라우저에서 새로고침을 해서 확인

8. https Server 
=> https 서버를 만들기 위해서는 인증서가 필요
https.createServer({cert:fs.readFileSync('도메인 인증서 경로'), key:fs.readFileSync('도메인 비밀키 경로'),
	ca:[fs.readFileSync('상위 인증서 경로'), fs.readFileSync('상위 인증서 경로')]}, (req, res) => {

}).listen(9000, () => {
    console.log('서버 대기 중')
})

** Express Framework
1. Express Framework
=> 웹 서버를 쉽게 만들 수 있도록 도와주는 프레임워크

2. Express Framework를 이용한 웹 서버 생성
1) Node Project 생성

2) 필요한 패키지 설치
=> express
=> nodemon (코드를 수정하면 자동으로 재시작하도록 해주는 모듈)을 개발용으로 설치

npm i express
npm i --save-dev nodemon

3) package.json을 수정
=> main 속성을 수정 : npm start로 시작할 수 있는 파일을 설정
=> scripts 속성을 수정 : 자동으로 재시작하도록 수정
"start": "nodemon app",	

4) main 속성에 설정한 파일을 생성(app.js)하고 작성

5) 서버 실행
=> npm start  명령이나 node 파일명을 입력하면 됩니다.

3. 클라이언트 요청 처리
1) 메소드 : express 객체를 이용해서 호출
=> get
=> post
=> put
=> delete
=> patch
=> options

2) 메소드의 매개변수는 2개
=> 첫번째 매개변수는 처리할 URL
=> 두번째 매개변수는 일반적으로 두 개의 매개변수(request, response)를 갖는 함수
response.send('출력할 내용')을 이용해서 브라우저에 출력할 수 있습니다.

3) app.js 파일에 요청 처리 코드 추가 후 브라우저에서 새로 고침
app.listen(app.get('port'), () => {
    console.log(app.get('port') + '번 포트에서 대기중');
})

4. HTML 출력
=> res.sendFile(파일 경로)

1) 프로젝트에 HTML 파일을 추가 - index.html
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8" />
        <title>Node Express</title>
    </head>
    <body>
        <h1>Express로 만든 웹 서버</h1>
        <p>쉽게 구성이 가능합니다.</p>
    </body>
</html>

2) 시작 요청 처리 코드를 수정
const path = require('path')

app.get('/', (req, res) => {
    // 텍스트 출력
    // res.send('환영합니다!!')

    // 현재 디렉토리에 있는 index.html을 출력
    res.sendFile(path.join(__dirname, '/index.html'))
})

3) 브라우저에서 새로고침을 하거나 localhost:3000 요청

5. dotenv
=> .env 파일의 내용을 읽어서 process.env로 생성해주는 패키지
=> 보안이 필요한 내용을 하드 코딩(소스 코드에 직접 작성)하는 것은 바람직하지 않음
하드 코딩을 하게 되면 소스 코드가 유출되었을 때 보안이 필요한 내용이 유출될 가능성이 생깁니다.
보안이 필요한 내용을 별도의 파일이나 데이터베이스에 저장하고 호출해서 사용하는 형태를 이용해서 해결합니다.
node에서는 .env도 사용을 하지만 별도의 properties 파일이나 XML, JSON, YAML 파일을 이용합니다.

개발 환경과 운영 환경이 다른 경우 개발 환경에서 운영 환경으로 migration을 할 때 
	소스 코드를 수정해야 하는 일이 발생하게 되고 이렇게 되면 개발 환경에서 
	실행되었던 코드가 운영 환경에서 실행이 안될 수 있습니다.

이부분도 설정 파일을 이용하는 경우가 많았는데 최근에는 클라우드 개발 환경이나 docker와 같은 
	가상화 기술을 이용하는 경우가 많습니다.

소스 코드 <-> 빌드를 수행해서 실행 코드를 생성

6. MiddleWare
=> express의 핵심 요소 중 하나
=> 요청과 응답의 중간에 위치해서 요청과 응답을 조작해고 기능을 추가하거나 필터링을 수행하는 모듈
=> app.use(미들웨어) 형태로 장착

app.use(미들웨어) : 모든 요청에서 미들웨어가 동작
app.use(url, 미들웨어) : url을 포함하고 있는 모든 요청에서 미들웨어가 동작
app.use 대신에 app.get이나 app.post에도 동일한 방식으로 장착할 수 있습니다.

=> 미들웨어가 수행할 동작은 3개의 매개변수를 갖는데 request, response, next입니다.
next()를 호출하면 다음 미들웨어로 이동합니다.

=> 에러 처리 미들웨어는 맨 앞에 error 객체를 1개 더 소유합니다. 

=> 미들웨어 종류
      - 애플리케이션 레벨 미들웨어 : 애플리케이션 동작과 관련된 미들웨어 
			      -> 프로그램 전체에 영향
      - 라우터 레벨 미들웨어 : 사용자의 요청 처리와 관련된 미들웨어
      - 에러 핸들링 미들웨어 : 에러가 발생했을 때 처리할 미들웨어
      - 내장 미들웨어 : express가 소유하고 있는 미들웨어, 설치가 필요없는 미들웨어
      - 3rd Party 미들웨어 : 다른 개발자가 만든 미들웨어, 설치를 해야만 사용 가능한 미들웨어

1) next()
=> 다음 미들웨어로 넘어가기 위한 함수
=> 대부분의 미들웨어는 이 함수 호출을 내부적으로 합니다.
=> next를 호출하지 않는 미들웨어는 반드시 res.send나 res.sendFile 등의 함수로 응답을 전송해야 하는데
	그렇지 않으면 클라이언트는 무한대기 상태에 빠지게 됩니다.
=> next 함수에 매개변수를 대입하는 경우가 있는데 'route'를 대입하면 다음 라우팅 처리 함수로 넘어가고
	그 이외의 경우는 매개변수를 대입하면 무조건 에러 처리 미들웨어로 넘어갑니다.

2) morgan
=> 서버로 들어온 요청과 응답을 콘솔에 기록해주는 로그 관련 미들웨어
=> morgan(format, optinos)로 사용
=> format
[dev | tiny | short | common | combined]

=> options
immediate : response 대신에 request에 로그를 출력하는데 서버에 크래시가 발생해서 서버가 종료되는 경우
	request의 내용은 기록이 되지만 reponse 내용은 기록되지 않습니다.

skip : 특정 상태 코드는 스킵하기 위해서 사용
skip:function(req, res) { return res.statusCode < 400 }
400 미만의 애러는 로그를 출력하지 않음

stream : 로그 작성을 위한 OutputStream으로 기본값으로 process.stdout이라서 모니터에 출력됨
	파일에 출력하고자 하는 경우에는
	var accessLotStream = FileStreamRotator.getStream({
		date_format : 'YYYYMMDD',
		filename : path.join(logDirectory, 'access-%DATE%.log'),
		frequency : 'daily',
		verbose : false })

	app.use(morgan('combined', {stream : accessLogStream}))
	위와 같은 코드로 매일 날짜 별로 로그를 파일에 기록

=> 로그 내용
[요청방식][요청 URL][상태코드][응답속도][ - ][응답바이트]

=> morgan 사용
     - npm install morgan 명령으로 설치
     - app.js 파일에 morgan 사용 명령을 추가
       // 로그 출력을 위한 모듈 설정
       const morgan = require('morgan')
       app.use(morgan('dev'))

     - app.js 파일을 실행시키고 브라우저에서 localhost:3000을 입력하고 터미널을 확인

     - app.js 파일에 morgan 사용 부분을 수정하고 디렉토리의 파일을 확인
       // 로그 출력을 위한 모듈 설정
       const morgan = require('morgan')
       const fs = require('fs')

       // 파일에 로그를 기록 - 2 
       var accessLogStream = fs.createWriteStream(
              path.join(__dirname, 'access.log'))

       app.use(morgan('combined', {stream : accessLogStream}))

3) static 
=> 정적인 파일들을 제공하는 미들웨어
=> 인수로 정적 파일의 경로를 제공
=> 사용 설정
app.use(url, express.static('실제 디렉토리 경로')

실제 디렉토리 경로를 path.join(__dirname, 'public')로 설정하면 url 요청이 오면 public 디렉토리의 파일을 제공
ex) app.use('/', express.static(path.join(__dirname, 'public'))
ex) localhost:3000/stylesheets/style.css 라고 요청을 하면 public 디렉토리에 있는
	stylesheets/style.css 파일을 제공하게 된다.

4) body-parser
=> 요청의 본문에 있는 데이터를 해석해서 req.body 객체로 만들어 주는 미들웨어
=> 폼의 데이터나 Ajax를 이용해서 post 방식으로 파라미터를 전송했을 때 이 미들웨어를 설정하면
	req.body.파라미터의 이름을 이용해서 파라미터에 접근이 가능
=> 전송되는 데이터의 JSON이나 버터 데이터(파일의 내용), 혹은 TEXT일 때는 다른 설정이 
	추가되어야 하며 전송되는 데이터에 파일이 존재하는 경우도 다른 미들웨어를 이용해야 합니다.

=> JSON인 경우 아래 설정 추가
app.use(express.json())
app.use(express.urlencoded({extended:false}))

=> 버퍼 데이터나 텍스트 데이터인 경우
const bodyParser = require('body-parser')
app.use(bodyParser.raw());
app.use(bodyParser.text());

5) compression
=> 데이터를 압축해서 전송하기 위한 미들웨어
=> 설치한 후 아래 설정을 추가
var compression = require('compression')
app.use(compression())