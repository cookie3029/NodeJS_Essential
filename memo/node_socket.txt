** Node_Socket
1. Socket
=> 통신을 할 수 있도록 해주는 NIC(Network Interface Card)를 
	추상화(프로그래밍에서 사용할 수 있도록 객체로 변환한 것)한 것

1) 소켓 프로그래밍의 분류
=> 고수준 소켓 프로그래밍 : 직접 연결과 해제를 하지 않는 방식으로 웹 프로그래밍이 대표적인
	고수준 소켓 프로그래밍의 대표적인 방식인데 구현이 쉽지만 효율이 떨어집니다.

=> 저수준 소켓 프로그래밍(소켓 프로그래밍) : 직접 소켓을 생성해서 통신을 하는 방식으로 
	구현이 어렵지만 효율이 좋습니다.

2) 프로토콜 종류
=> TCP : 연결형 통신
요청 -> 제공하는 쪽에서 메타 데이터 전송 -> 요청 -> 데이터 전송 -> 응답

=> UDP : 비연결형 통신
요청 -> 데이터 전송

2. Web Socket
1) HTTP, HTTPS
=> Client와 Server간 접속을 유지하지 않고 한 번에 한 방향으로만 통신이 가능한 Half-Duplex
     (Half-Duplex : 반이중 - 순간에는 수신이나 송신만 가능
=> Client와 Server간의 정보 유지를 위해서 Cookie와 Session의 개념을 학습합니다.
=> 서로 간에 짧은 주기를 가지고 데이터를 자주 주고 받아야 하는 경우에 성능 저하를 피할 수 없음
=> 접속을 유지할 수 없기 때문에 Client의 요청 없이 서버가 클라이언트에게 데이터를 전송할 수 없음
이 부분은 Ajax Pooling 기법으로 해결

2) HTML5에 새로 추가된 API
=> HTML5의 로컬 저장소 : WebStorage, Web SQL, Indexed DB 같은 개념을 이용해서 웹 브라우저에 데이터를
	저장하는 개념
=> HTML의 Web Socket : 클라이언트와 서버 간의 Full-Duplex(전이중 - 동시에 주고 받는 것이 가능)
=> HTML의 Web Push : 서버가 클라이언트의 요청이 없어도 데이터를 전송하는 기능, Notification이나
	SSE(Server Sent Event)라고 한다.

3) 웹 소켓
=> ws 프로토콜 사용
=> 모든 브라우저가 웹 소켓을 지원하지는 않습니다.
IE 하위 버전에서는 지원하지 않습니다.

3. Node에서의 Web Socket  - websocket 모듈 이용
=> Socket.IO 모듈을 이용하는 경우가 많이 이용하지만 ws 모듈을 이용하기도 하고 websocket 모듈도 가능
1) Web Socket 구현
=> 프로젝트 생성

2) 필요한 패키지 설치
=> websocket, express, morgan

=> 개발용으로 nodemon

3) 프로젝트에 index.html 파일을 생성하고 작성
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8"/>
        <title>웹 소켓</title>
    </head>
    <body>
        소켓 연결 상태 : <span id="status"></span>
        <br/>
        메시지 : <ul id="message"></ul>
    </body>
</html>

4) 프로젝트에 index.js 파일을 추가하고 작성 - websocket 모듈을 이용한 웹 소켓 구현
var server = http.createServer((req, res) => {
    if(req.url == "/") {
        res.writeHead(200, {'Content-Type':'text/html'})
        res.end('Web Socket')
    } else if(req.url == "/index") {
        fs.readFile("index.html", (error, data) => {
            res.writeHead(200, {'Content-Type':'text/html;charset=utf-8'})  
            res.end(data) 
        })
    }
})

// 서버 구동
server.listen(8000, () => {
    console.log('Server is listening on port 8000')
})

5) 프로젝트를 실행하고 브라우저에 localhost:8000, localhost:8000/index 요청을 확인

6) 클라이언트 소켓 코드 작성
// 클라이언트에서 연결 요청이 오면
wsServer.on('request', (request) => {
    // 클라이언트와 example-echo라는 이름으로 연결
    var connection = request.accept('example-echo', request.origin)

    // 연결된 클라이언트에서 메시지가 오면
    connection.on('message', (message)=> {
        if(message.type === 'utf8') {
            // 메시지 출력
            console.log('받은 메시지 : ' + message.utf8Data);

            // 받은 메시지를 클라이언트에게 전송
            connection.sendUTF(message.utf8Data)
        }
        // 일반 파일 데이터라면
        else if(message.type == 'binary') {
            connection.sendUTF(message.binaryData)
        }

        connection.on('close', (reasonCode, description) => {
            console.log('Peer' + connnection.remoteAddress + ' disconnected.')
        })
    })
})

7) index.html 파일에 웹 소켓 사용을 위한 스크립트 코드를 추가
<script>
    // 브라우저의 웹 소켓 여부 확인
    if('WebSocket' in window) {
        // DOM(Document Object Model) 찾아오기 
        var status = document.getElementById('status')
        var message = document.getElementById('message')

        // 웹 소켓 연결
        // IP는 서버의 IP를 적어야 하고 이름은 서버에서 만든 이름을 적어야 합니다.
        var ws = new WebSocket('ws://127.0.0.1:8000', 'example-echo')
    }
    ws.addEventListener('open', (e) => {
        status.innerHTML = '연결 성공'
        
        // 웹 소켓 서버에게 전송
        for(var i = 0; i < 10; i++) {
            ws.send('Hello ' + i)
        }
    })

    ws.addEventListener('message', (evt) => {
        message.innerHTML += '<li>받은 메시지 : ' + evt.data + '</li>'
    })
</script>

4. Node에서의 Web Socket  - ws 모듈 이용 : expresss 모듈과 함께 사용 가능
1) 패키지를 추가 설치
cookie-parser, detenv, express, express-session, morgan, nunjucks, ws

2) 프로젝트에 라우팅 모듈화를 위한 routes 디렉토리를 생성

3) routes 디렉토리에 index.js 파일을 생성하고 요청 처리 코드를 작성
const express = require("express")
const router = express.Router()

router.get('/', (req, res) => {
    res.render('websocket')
})

module.exports = router

4) 웹 소켓 로직을 위한 socket.js 파일을 생성하고 작성
const WebSocket = require('ws')

module.exports = (server) => {
    // 웹 소켓 서버 생성
    const wss = new WebSocket.Server({server})

    // 클라이언트가 접속을 하면
    wss.on('connection', (ws, req)=> {
        // 클라이언트의 IP 확인
        const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress
        
        console.log('새로운 클라이언트 접속 : ' + ip)

        ws.on('message', (message) => {
            console.log('클라이언트에게 받은 메시지 : ', message)
        })

        ws.on('close', () => {
            console.log('클라이언트 접속 종료 : ', ip);

            // 타이머 종료
            clearInterval(ws.interval)
        })

        // 타이머를 이용해서 클라이언트에게 주기적으로 메시지를 전송
        ws.interval = setInterval(() => {
            if(ws.readyState === ws.OPEN) {
                ws.send('서버에서 클라이언트에게 메시지를 전송합니다.')
            }
        }, 3000)
    })
}

5) 프로젝트의 index.js 파일을 수정
// WS 모듈을 이용한 웹 소켓 구현 - 서버에서 일정한 주기를 가지고 메시지 전송
const express = require('express')

const path = require('path')
const dotenv = require('dotenv')
const morgan = require('morgan')
const nunjucks = require('nunjucks')

const session = require('express-session')
const cookieParser = require('cookie-parser')

dotenv.config()

const webSocket = require('./socket')

// 파일 이름을 생략하면 index.js입니다.
const indexRouter = require('./routes')

const app = express()

app.set('port', 8001)
// 뷰 템플릿 (서버의 데이터를 출력할 수 있는 html 파일) 설정
app.set('view engine', 'html')

nunjucks.configure('views', {
    express:app,
    watch:true
})

app.use(morgan('dev'))
app.use(express.static(path.join(__dirname, 'public')))

app.use(express.json())
app.use(express.urlencoded({extended:false}))

app.use(cookieParser('websocket'))

app.use(session({
    resave:true,
    saveUninitialized:false,
    secret:'websocket',
    cookie:{
        httpOnly:true,
        secure:false
    }
}))

// /로 시작하는 요청은 indexRouter가 처리
app.use('/', indexRouter)

const server = app.listen(app.get('port'), () => {
    console.log(app.get('port'), '번 포트에서 대기 중')
})

webSocket(server)

6) 프로젝트에 view 디렉토리를 생성하고 websocket.html 파일을 생성
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8"/>
        <title>웹 소켓</title>
    </head>
    <body>
        <div>검사를 이용해서 console과 network를 확인하세요</div>
    </body>
    <script>
        const webSocket = new WebSocket('ws://localhost:8001')
        webSocket.addEventListener('open', () => {
            console.log('웹 소켓 서버와 연결')
        })
        webSocket.addEventListener('message', (evt) => {
            console.log(evt.data)
            webSocket.send('클라이언트가 서버에게 보내는 메시지')
        })
    </script>
</html>

5. node에서 웹 소켓 구현 - socket.io 모듈
1) 설치
npm install socket.io

2) 프로젝트의 socket.js 파일을 수정 - 없으면 생성
const SocketIO = require('socket.io')

module.exports = (server) => {
    // 웹 소켓 생성
    const io = SocketIO(server, {path:'/socket.io'})

    // 클라이언트가 접속하면
    io.on('connection', (socket) => {
        // 클라이언트 IP 확인
        const req =  socket.request
        const ip = req.headers['x-forwared-for'] || req.connection.remoteAddress
        
        console.log('새로운 클라이언트 접속 : ' + ip)

        socket.on('diesconnect', () => {
            clearInterval(socket.interval)
        })

        socket.on('reply', (data) => {
            console.log(data)
        })

        socket.interval = setInterval(() => {
            // emit은 강제로 이벤트를 발생시키는 것입니다.
            // new라는 이벤트를 안녕이라는 파라미터로 발생
            socket.emit('news', '안녕')
        }, 3000)
    })
}

3) websocket.html 파일 수정
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8"/>
        <title>웹 소켓</title>
    </head>
    <body>
        <div>검사를 이용해서 console과 network를 확인하세요</div>
    </body>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io.connect('http://localshot:8001', {
            path:'/socket.io',
            transports:['websocket']
        })

        socket.on('news', (data) => {
            console.log(data)
            socket.emit('reply', 'Hello Socket.IO')
        })
    </script>
</html>

6. 채팅 구현
1) socket.js 파일을 수정
// Socket.IO 모듈 가져오기
const SocketIO = require('socket.io')

//  서버를 생성해서 다른 곳에서 사용할 수 있도록 설정
module.exports = (server) => {
    // 웹 소켓 생성
    const io = SocketIO(server, {path:'/socket.io'})

    // 클라이언트가 접속하면
    io.on('connection', (socket) => {
        // 클라이언트 IP 확인
        const req =  socket.request
        const ip = req.headers['x-forwared-for'] || req.connection.remoteAddress
        
        console.log('새로운 클라이언트 접속 : ' + ip)

        // 접속을 해제했을 때 처리 - 타이머 종료
        socket.on('disconnect', () => {
            clearInterval(socket.interval)
        })

        // reply 이벤트가 발생했을 때 처리 - 사용자가 보내는 reply 이벤트
        // 원래 존재하는 이벤트가 아님
        socket.on('reply', (data) => {
            console.log(data)
        })

        // 타이머 생성 - 3초마다 강제로 news라는 이벤트를 발생
        socket.interval = setInterval(() => {
            // emit은 강제로 이벤트를 발생시키는 것입니다.
            // new라는 이벤트를 안녕이라는 파라미터로 발생
            socket.emit('news', '안녕')
        }, 3000)

        // 클라이언트가 메시지를 전송하면
        socket.on('message', (data) => {
            // 모든 클라이언트에게 메시지 전송
            io.sockets.emit('message', data)
        })
    })
}

2) websocket.html 파일 수정
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8"/>
        <title>웹 소켓</title>

        <!-- 모바일 웹 페이지 생성 시 옵션 설정 -->
        <meta name="viewport" content="width=device-width, initial-scale=1"/>

        <!-- JQuery Mobile 설정 - CSS -->
        <link rel="stylesheet" href="http://code.jquery.com/mobile/1.2.0/jquery.mobile-1.2.0.min.css"/>

        <!-- JQuery Mobile 설정 - SCRIPT -->
        <!-- JQuery Mobile은 기본적으로 Single Page Application으로 제작 -->
        <!-- 내부 코드는 ajax로 동작 -->
        <script src="http://code.jquery.com/jquery-1.8.2.min.js"></script>
        <script src="http://code.jquery.com/mobile/1.2.0/jquery.mobile-1.2.0.min.js"></script>
        
        <!-- 소켓 설정 -->
        <script src="/socket.io/socket.io.js"></script>
        <script>
            $(document).ready(() => {
                // 웹 소켓 생성
                var socket = io.connect('http://localhost:8001')

                // 소켓 서버로부터 message 이벤트가 오면
                socket.on('message', (data) => {
                    // 받은 메시지를 이용해서 출력할 내용을 생성
                    var output = ''

                    output += '<li>'
                    output += '<h3>' + data.name + '</h3>'
                    output += '<p>' + data.message + '</p>'
                    output += '<p>' + data.date + '</p>'
                    output += '</li>'

                    // 메시지 출력
                    $(output).prependTo('#content')
                    $('#content').listview('refresh')
                })

                // 버튼 눌렀을 때 메시지 전송
                $('button').click(() => {
                    socket.emit('message', {
                        name:$('#name').val(),
                        message:$('#message').val(),
                        date:new Date().toUTCString()
                    })

                    $('#message').val('')
                })
            })
        </script>
    </head>
    <body>
        <div data-role='page'>
            <div data-role='header'>
                <h1>Socket.IO Chatting</h1>
            </div>
            <div data-role='content'>
                <h3>별명</h3>
                <input id="name" />
                <a data-role='button' href='#chatpage'>채팅 시작</a>
            </div>
        </div>

        <div data-role='page' id='chatpage'>
            <div data-role='header'>
                <h1>Socket.IO Chatting</h1>
            </div>
            <div data-role='content'>
                <input id='message' />
                <button>전송</button>
                <ul id='content' data-role='listview' data-inset='true'>
                    
                </ul>
            </div>
        </div>
    </body>
</html>

7. 전자 칠판 구현
1) 프로젝트에 public 디렉토리를 생성 - 정적인 데이터 저장이 목적

2) websocket.html 파일 수정
<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8"/>
        <title>웹 소켓</title>

        <!-- 모바일 웹 페이지 생성 시 옵션 설정 -->
        <meta name="viewport" content="width=device-width, initial-scale=1"/>

        <!-- 내부 코드는 ajax로 동작 -->
        <!-- JQuery Mobile은 기본적으로 Single Page Application으로 제작 -->
        <script src="http://code.jquery.com/jquery-1.8.2.min.js"></script>
        <script src="js/board.js"></script>

        <link rel="stylesheet" href="stylesheet/style.css">
    </head>
    <body>
        <canvas id="cv" width="860px" height="645px"></canvas>
    </body>
</html>

3) public 디렉토리에 images 디렉토리를 생성하고 blackboard.jpg 파일을 추가

4) public 디렉토리에 stylesheet 디렉토리르 생성하고 style.css 파일을 추가한 후 작성
body {
    margin: 0px;
}

#cv {
    width: 860px;
    height: 645px;
    background-image: url('../images/blackboard.jpg');
}

5) websocket.html 파일을 수정
=> 캔버스 아래에 메뉴와 버튼을 추가
<div class="menu"></div>
<button id="clear"></button>

6) style.css 파일의 내용을 수정
body {
    margin: 0px;
}

#cv {
    width: 840px;
    height: 645px;
    background-image: url('../images/blackboard.jpg');
    float:left;
}

.menu {
    float: left;
}

button {
    width: 100px;
    height: 50px;
}

7) public 디렉토리에 js 디렉토리를 생성하고 board.js 파일을 추가한 후 작성
var ctx

$(() => {
    // console.log('시작하자마자 수행')
    ctx = $('#cv').get(0).getContext('2d')

    $('#cv').bind('mousedown', draw.start)
    $('#cv').bind('mousemove', draw.move)
    $('#cv').bind('mouseup', draw.end)
    $('#clear').bind('click', draw.clear)

    // console.log('시작하자마자 수행_1')
    // 기본 설정
    shape.setShape()
    // console.log('시작하자마자 수행_2')
})

var shape = {
    color:'white',
    width:3,
    setShape: function(color, width) {
        if(color != null) {
            this.color = color;
        }

        if(width != null) {
            this.width = width
        }

        ctx.strokeStyle = this.color
        ctx.lineWidth = this.width

        // console.log(ctx.strokeStyle)
        // console.log(ctx.lineWidth)
    }
}

var draw = {
    drawing:null,
    start:function(e){
        ctx.beginPath()
        ctx.moveTo(e.pageX, e.pageY)

        this.drawing = true

        // console.log('마우스 버튼 누름')
    },
    move:function(e){
        if(this.drawing) {
            ctx.lineTo(e.pageX, e.pageY)
            ctx.stroke()
            
            // console.log('마우스 움직임')
        }
    },
    end:function(e){
        this.drawing = false

        // console.log('마우스에서 손을 뗌')
    },
    clear:function(){
        ctx.clearRect(0, 0, cv.width, cv.height)
    }
}

8) 현재까지 작성한 후 실행해서 마우스로 선이 그려지고 버튼을 누르면 삭제되는지 확인

9) websocket.html 파일의 메뉴 영역에 색상 변경, 펜 두께, 펜 모양 메뉴를 추가
<div class="menu">
    <button id="clear">전체 삭제</button>
    <fieldset>
        <legend>색상 변경</legend>
        <select id="pen_color"></select>
    </fieldset>
    <fieldset>
        <legend>두께</legend>
        <select id="pen_width"></select>
    </fieldset>
    <fieldset id="pen_shape">
        <legend>모양</legend>
    </fieldset>
</div>

10) style.css 파일에 추가한 DOM의 style 설정 코드 추가
body {
    margin: 0px;
}

#cv {
    width: 823px;
    height: 645px;
    background-image: url('../images/blackboard.jpg');
    float:left;
}

.menu {
    width: 120px;
    float: left;
}

button {
    margin-left: 0.1rem;
    width: 115px;
    height: 50px;
}

#cv_pen {
    width: 100px;
    height: 50px;
    float: left;
    background-image: url('images/blackborad.jpg');
}

fieldset {
    width: 85px;
    height: 50px;
    float: left;
}

#pen_shape {
    position: absolute;
    top:10px;
    left:680px;
    color: white;
}

11) board.js 파일에 초기화를 위한 코드를 추가
// 색상 선택 select에 추가할 내용
var color_map = [
    {'value':'white', 'name':'하얀색'},
    {'value':'red', 'name':'빨간색'},
    {'value':'orange', 'name':'주황색'},
    {'value':'yellow', 'name':'노란색'},
    {'value':'blue', 'name':'파랑색'},
    {'value':'black', 'name':'검은색'}
// select에 설정
for(var key in color_map) {
    $('#pen_color').append('<option value=' + color_map[key].value + '>' + color_map[key].name + '</option>')
}

// 두께 선택 select 설정
for(var i=1; i<16; i++) {
    $('#pen_width').append('<option value=' + i + '>' + i + '</option>')
}

12 board.js 파일의 shape 객체에 select의 값이 변경되었을 때 호출될 함수를 추가
change: function() {
    var color = $('#pen_color option:selected').val()
    var width = $('#pen_width option:selected').val()
}

13) board.js 파일에 select 값이 변경될 때 호출할 함수를 설정
// select에 이벤트 연결
$('select').bind('change', shape.change())

14) index.js 파일에 소켓 서버 설정 코드를 추가
const io = require('socket.io')(server)

15) websocket.html 파일에 socket.io.js 파일을 사용할 수 있도록 링크를 추가
<script src="/socket.io/socket.io.js"></script>

16) board.js 파일에 전역 변수 선언
var socket

17) board.js 파일에 소캣 생성 코드를 추가 - $(() => {여기에 추가})
socket = io.connect('http://' + window.location.host)

18) board.js 파일에 msg 객체 생성
var msg = {
    line:{
        send:function(type, x, y) {
            socket.emit('linesend', {
                'type':type,
                'x':x,
                'y':y,
                'color':shape.color,
                'width':shape.width
            })
        }
    }
}

19) board.js 파일의 이벤트 처리 함수에 메시지를 전송하는 코드를 추가
var draw = {
    drawing:null,
    start:function(e){
        ctx.beginPath()
        ctx.moveTo(e.pageX, e.pageY)

        this.drawing = true

        // console.log('마우스 버튼 누름')

        msg.line.send('start', e.pageX, e.pageY)
    },
    move:function(e){
        if(this.drawing) {
            ctx.lineTo(e.pageX, e.pageY)
            ctx.stroke()
            
            // console.log('마우스 움직임')
            msg.line.send('move', e.pageX, e.pageY)
        }
    },
    end:function(e){
        this.drawing = false

        // console.log('마우스에서 손을 뗌')
        msg.line.send('end')
    },
    clear:function(){
        ctx.clearRect(0, 0, cv.width, cv.height)
        msg.line.send('clear')
    }
}

var msg = {
    line:{
        send:function(type, x, y) {
            socket.emit('linesend', {
                'type':type,
                'x':x,
                'y':y,
                'color':shape.color,
                'width':shape.width
            })
        }
    }
}

20) socket.js 파일에 메시지를 받았을 때 메시지를 전송하는 코드를 작성
// 클라이언트에서 linesend라는 이벤트가 발생하면
// 연결된 모든 클라이언트에게 linesend_toclient 이벤트를 발생시킴
socket.on('linesend', (data) => {
    socket.broadcast.emit('linesend_toclient', data)
})

21) board.js 파일에 linesend_toclient 이벤트가 온 경우 수행할 코드를 작성
// 소켓에서 linesend_toclient 이벤트가 발생했을 때 처리
socket.on('linesend_toclient', (data) => {
    draw.drawFromServer(data)
})

22) board.js 파일의 draw 객체에 drawFromServer 함수를 추가
drawFromServer:function(data) {
    if(data.type=='start') {
        ctx.beginPath()
        ctx.moveTo(data.x, data.y)
        ctx.strokeStyle = data.color
        ctx.lineWidth = data.width         
    } 
    if(data.type=='move') {
        ctx.lineTo(data.x, data.y)
        ctx.stroke()
    } 
    if(data.type=='end') {
    } 
    if(data.type=='clear') {
        ctx.clearRect(0, 0, cv.width, cv.height)
        shape.setShape()
    }
}

8. Node의 Socket 프로그래밍
=> TCP와 UDP 통신 모두 가능

1) TCP
=> 연결형 프로토콜을 이용한 통신
=> 요청하는 쪽에서 서버에게 요청을 하면 서버는 클라이언트에게 메타 데이터(데이터에 대한 정보)를 
전송하고 클라이언트는 이 메타 데이터를 읽고 전송 가능 여부와 데이터에 대한 정보를 파악해서 서버에게
실제 데이터를 전송하고 전송받은 쪽에서는 이에 대한 응답을 합니다.
=> 신뢰성이 높은 통신 방식지이만 실제 데이터 이외에도 다른 데이터를 많이 전송하기 때문에 효율은 떨어질 수 있습니다.
=> 대부분의 통신은 TCP 방식

2) UDP
=> 비 연결형 통신으로 일방적으로 데이터를 전송하고 종료하는 방식
=> 신뢰성이 낮지만(제대로 전송이 이루어졌는지 알 수 없음) 효율이 좋습니다.
=> DNS(Domain Name Service), APNS(Apple Push Notification Service), 
     FCM(Google의 Firebase Cloud Massaging) 등은 UDP입니다.

9. Java와 Node간의 UDP 통신
1) Java 프로젝트를 생성해서 main을 가진 클래스를 생성
package test;

import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;

public class UDPServer {
	public static void main(String[] args) {
		try {
			// UDP 소켓 클래스 생성
			DatagramSocket dsoc = new DatagramSocket(4445);
			
			// 데이터를 저장하기 위한 바이트 배열 생성
			byte [] data = new byte[65536];
			
			while(true) {
				System.out.println("받을 준비 완료");
				
				// 데이터를 전송받기 위한 준비가 완료됨 - 데이터를 전송받아야 다음으로 넘어감
				DatagramPacket dp = new DatagramPacket(data, data.length);
				dsoc.receive(dp);
				
				// 보낸 곳 주소 확인
				System.out.println("보낸 곳 : " + dp.getAddress().getHostAddress());
			
				// 전송받은 데이터 확인
				String utf8String = 
						new String(new String(dp.getData()).trim().getBytes("UTF-8"));
				System.out.println("받은 메시지 : " + utf8String);
				
				String msg = "message";
				
				// 보낸 곳의 주소를 저장
				InetAddress address = dp.getAddress();
				
				int port = dp.getPort();
				
				// UDP로 전송할 데이터 생성
				dp = new DatagramPacket(msg.getBytes(), msg.getBytes().length, address, port);
				
				// 데이터 전송\
				dsoc.send(dp);
			}
		} catch (Exception e) {
			System.out.println("소켓 통신 에러");
			System.out.println(e.getLocalizedMessage());
		}
	}
}

2) node 프로젝트에 udp.js 파일을 생성하고 작성
var http = require('http')
var message =''

// UDP 통신을 위한 객체 생성
var client = require('dgram').createSocket('udp4')

// 메시지를 받았을 때 수행할 내용
client.on('message', (msg, rinfo) => {
    message = msg
})

// 에러가 발생했을 때 수행할 내용
client.on('error', (err) => {
    console.log('에러 : ', err)
})

http.createServer((req, res) => {
    var data = new Buffer('카비곤입니다.')
    client.send(data, 0, data.length, 4445, 'localhost')
    
    res.writeHead(200, {
        'Content-Type':'text/plain; charset=utf-8'
    })
    
    res.end(message)
}).listen(1338, '127.0.0.1')

console.log('Server 구동 중');

3) 서로 다른 프로그래밍 언어 간에 문자열을 주고 받을 때는 인코딩에 주의를 해야 합니다.
문자열을 생성할 때 인코딩을 맞추어서 생성해야 합니다.

10. Node와 Java 간의 TCP 통신
1) Java Project에 클래스를 추가하고 작성한 후 실행
package test;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;

public class TCPServer {
	public static void main(String[] args) {
		// 클라이언트의 접속을 처리하기 위한 소켓
		ServerSocket ss = null;
		
		// 클라이언트와 통신을 하기 위한 소켓
		Socket socket = null;
		
		try {
			// 서버 소켓을 생성
			ss = new ServerSocket(9999);
			
			while (true) {
				System.out.println("서버 대기중");
				
				// 클라이언트의 접속 대기
				socket = ss.accept();
				
				// 접속자 정보 확인
				System.out.println("접속자 정보 : " + socket.toString());
				
				// 클라이언트가 전송한 정보 확인
				BufferedReader in = new BufferedReader(
						new InputStreamReader(socket.getInputStream()));
				
				// 한 줄 읽기
				String str = in.readLine();
				System.out.println("전송된 내용 : " + str);
				
				in.close();
				socket.close();
			}
		} catch (Exception e) {
			System.out.println("소켓 통신 에러");			
			System.out.println(e.getLocalizedMessage());
		}
	}
}

2) node 프로젝트에 tcp.js 파일을 추가하고 작성
var http = require('http')
var fromServer =''

// TCP 통신을 위한 객체 생성
var client = require('net').Socket()


// 서버에 접속
client.connect(9999, ()=>{
    console.log("서버에 접속 성공")
})

// 서버에서 데이터가 전송된 경우
client.on('data', (data) => {
    console.log('받은 데이터 : ', data)
    fromServer = data;
})

// 연결이 해제된 경우
client.on('close', () => {
    console.log('연결 해제')
    client.destroy()
})

http.createServer((req, res) => {
    client.write('안녕하세요! 카비곤입니다.', () => {
        console.log('보내기 성공')
    })
    
    res.writeHead(200, {
        'Content-Type':'text/plain; charset=utf-8'
    })
    
    res.end(fromServer)
}).listen(1338, '127.0.0.1')

console.log('Server 구동 중');



